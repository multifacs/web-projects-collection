<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Показания счетчиков</title>
</head>

<body>
  <nav>
    <a href="/data">
      <button>
        Все данные
      </button>
    </a>
  </nav>
</body>

<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

<script>
  const capitalize = (string) => {
    return string.charAt(0).toUpperCase() + string.slice(1);
  }

  const structure = <%- JSON.stringify(structure) %>
    delete structure._id

  const form = document.createElement('form')
  form.method = 'POST'
  let fieldset = document.createElement('fieldset')
  const legend = document.createElement('legend')
  legend.innerHTML = capitalize(structure.name)
  fieldset.appendChild(legend)
  form.appendChild(fieldset)

  // paths = []

  for (const [key, value] of Object.entries(structure)) {
    if (key !== 'name' && key !== '_id') {
      if (!Array.isArray(value)) {
        let input = document.createElement('input')
        input.name = key
        input.type = value
        input.id = key
        input.required = true
        let label = document.createElement('label')
        label.for = key
        label.innerHTML = capitalize(key)
        fieldset.insertBefore(input, fieldset.firstChild)
        fieldset.insertBefore(label, fieldset.firstChild)
        // let obj = {}
        // obj[key] = input
        // paths.push(obj)
        input.addEventListener('change', (e) => {
          if (value == 'string') {
            structure[`${key}`] = e.target.value
          } else if (value == 'number') {
            structure[`${key}`] = parseInt(e.target.value)
          }
          console.log(structure)
        })
      } else {
        value.forEach((entry, idx) => {
          let inner_fieldset = document.createElement('fieldset')
          for (const [inner_key, inner_value] of Object.entries(entry)) {
            if (inner_key === 'name') {
              const legend = document.createElement('legend')
              legend.innerHTML = capitalize(inner_value)
              inner_fieldset.appendChild(legend)
            } else {
              let input = document.createElement('input')
              input.name = entry.name + '#' + inner_key
              input.type = inner_value
              input.id = inner_key
              input.required = true
              let label = document.createElement('label')
              label.for = inner_key
              label.innerHTML = capitalize(inner_key)
              inner_fieldset.appendChild(label)
              inner_fieldset.appendChild(input)

              // let obj = {}
              // obj[key + `[${idx}]` + `['${inner_key}']`] = input
              // obj[`structure['${key}'][${idx}]['${inner_key}']`] = input
              // paths.push(obj)
              // paths.push(`structure[${key}][${idx}]['${inner_key}']`)

              input.addEventListener('change', (e) => {
                if (inner_value == 'string') {
                  structure[`${key}`][idx][`${inner_key}`] = e.target.value
                } else if (inner_value == 'number') {
                  structure[`${key}`][idx][`${inner_key}`] = parseInt(e.target.value)
                }
                console.log(structure)
              })
            }
          }
          fieldset.appendChild(inner_fieldset)
        })
      }
    }
  }

  const submit = document.createElement('input')
  submit.type = 'submit'
  fieldset.appendChild(submit)
  document.body.appendChild(form)

  //console.log(paths)

  //console.log(Object.keys(paths[0])[0])
  //console.log(structure)
  //eval(Object.keys(paths[0])[0]) = 123
  console.log(structure)

  form.addEventListener('submit', async (e) => {
    e.preventDefault()
    const res = await axios.post('/', structure);
    window.location.href = '/data'
  })
</script>

<style>
  *,
  *::after,
  *::before {
    box-sizing: border-box;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  }

  nav {
    display: flex;
    justify-content: center;
    gap: 1em;
    margin: 2em 0;
  }

  form {
    width: 60%;
    display: flex;
    flex-direction: column;
    gap: 1em;
    margin: 8em auto;
  }

  form fieldset {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.4em;
  }

  form fieldset input {
    width: 20%;
  }

  form fieldset fieldset input {
    width: 50%;
  }

  form fieldset fieldset {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 40%;
  }

  form input[type="submit"] {
    width: 30%;
  }
</style>

</html>